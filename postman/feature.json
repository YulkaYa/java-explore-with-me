{
	"info": {
		"_postman_id": "2e9d481f-c12c-422a-963f-d29a7b30dc3b",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "34206662"
	},
	"item": [
		{
			"name": "User Comment Endpoints",
			"item": [
				{
					"name": "Create Comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());// создает событие\r",
									"        const userComment = await api.addUser(rnd.getUser());// добавляет коммент\r",
									"        pm.collectionVariables.set(\"userId\", userComment.id);// установила в userid id юзера userComment\r",
									"\r",
									"// блок с добавлением события \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody = rnd.getEvent(category.id);\r",
									"        eventBody['requestModeration'] = true\r",
									"        const event = await api.addEvent(user.id, eventBody);\r",
									"        await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"        pm.collectionVariables.set('event' , JSON.stringify(event));\r",
									"\r",
									"\r",
									"// добавляем коммент к созданному событию\r",
									"        comment = rnd.getComment(event.id);\r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"        pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"const source1 = JSON.parse(pm.collectionVariables.get('event'));\r",
									"\r",
									"pm.test(\"Комментарий должно содержать поля: id, title, text, creator, event, createdOn, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('creator');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.title).equal(source.title, 'Название комментария должно соответствовать названию комментария в запросе');\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должна соответствовать тексту комментария в запросе');\r",
									"    pm.expect(target.creator.id).equal(pm.collectionVariables.get(\"userId\"), 'id создателя комментария должен соответствовать id создателя комментария в запросе');\r",
									"    pm.expect(target.event.id).equal(pm.collectionVariables.get('eventId'), 'id события комментария должен соответствовать id события комментария в запросе');\r",
									"    pm.expect(target.event.description).equal(source1.description,'description события должна соответствовать тексту комментария в запросе')\r",
									"    pm.expect(target.createdOn).to.not.be.null;\r",
									"    pm.expect(target.state).equal(\"PENDING\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/comments/user?userId={{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"user"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());// создает событие\r",
									"        const userComment = await api.addUser(rnd.getUser());// добавляет коммент\r",
									"        // блок с добавлением события \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody = rnd.getEvent(category.id);\r",
									"        eventBody['requestModeration'] = true\r",
									"        let event = await api.addEvent(user.id, eventBody);\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"// добавляем 1й коммент к созданному событию от 1 пользователя\r",
									"        pm.collectionVariables.set(\"uid\", userComment.id);\r",
									"        const comment = await api.addComment((rnd.getComment(event.id)), userComment.id);\r",
									"\r",
									"// добавляем 2й коммент к созданному событию от 2 пользователя\r",
									"        pm.collectionVariables.set(\"userId\", user.id);// установила в userid id юзера user\r",
									"        pm.collectionVariables.set(\"uid1\", user.id);\r",
									"        const comment1 = await api.addComment((rnd.getComment(event.id)),user.id);\r",
									"        pm.collectionVariables.set('comment1' , JSON.stringify(comment1));\r",
									"        pm.collectionVariables.set(\"commentId\", comment1.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const source = JSON.parse(pm.collectionVariables.get('comment1'));\r",
									"\r",
									"pm.test(\"Комментарий должно содержать поля: id, title, text, creator, event, createdOn, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('creator');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.title).equal(source.title, 'Название комментария должно соответствовать названию комментария в запросе');\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должна соответствовать тексту комментария в запросе');\r",
									"    pm.expect(target.creator.id).equal(pm.collectionVariables.get(\"userId\"), 'id создателя комментария должен соответствовать id создателя комментария в запросе');\r",
									"    pm.expect(target.event.id).equal(source.event.id, 'id события комментария должен соответствовать id события комментария в запросе');\r",
									"    pm.expect(target.event.description).equal(source.event.description,'description события должна соответствовать тексту комментария в запросе');\r",
									"    pm.expect(target.createdOn).to.not.be.null;\r",
									"    pm.expect(target.state).equal(\"PENDING\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/comments/user/{{commentId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"user",
								"{{commentId}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Comments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
									"        const user2 = await api.addUser(rnd.getUser());// добавляет коммент\r",
									"        \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        // блок с добавлением события1 \r",
									"        let eventBody1 = rnd.getEvent(category.id);\r",
									"        eventBody1['requestModeration'] = true\r",
									"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
									"        await api.publishEvent(event1.id);\r",
									"\r",
									"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
									"        const comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
									"\r",
									"// добавляем 2й коммент к 1му событию от 2 пользователя\r",
									"        const comment2 = await api.addComment((rnd.getComment(event1.id)), user2.id);\r",
									"        \r",
									"// добавляем 3й коммент к 1му событию от 2 пользователя\r",
									"        const comment3 = await api.addComment((rnd.getComment(event1.id)), user2.id);\r",
									"        pm.collectionVariables.set('comment1' , JSON.stringify(comment2));\r",
									"        pm.collectionVariables.set('comment2' , JSON.stringify(comment3));\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"const source = JSON.parse(pm.collectionVariables.get('comment1'));\r",
									"const source1 = JSON.parse(pm.collectionVariables.get('comment2'));\r",
									"const size = pm.response.json().length;\r",
									"const target = pm.response.json()[0];\r",
									"const target1 = pm.response.json()[1];\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, title, text, creator, event, createdOn, publishedOn, state, adminComment\", function () {\r",
									"    pm.expect(target).to.contain.keys('id', 'title', 'text', 'creator', 'event', 'createdOn', 'publishedOn', 'state', 'adminComment');\r",
									"    pm.expect(target1).to.contain.keys('id', 'title', 'text', 'creator', 'event', 'createdOn', 'publishedOn', 'state', 'adminComment');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(size).equal(2, 'пользователю должно быть доступно только 2 его события');\r",
									"    pm.expect(target.id).equal(source.id, 'id 0 комментария должно соответствовать id 1го комментария от юзера');\r",
									"    pm.expect(target1.id).equal(source1.id, 'id 1 комментария должно соответствовать id 2го комментария от юзера');\r",
									"    pm.expect(target.creator.id).equal(source.creator.id, 'id создателя 0 комментария должно соответствовать id  создателя 1го комментария от юзера');\r",
									"    pm.expect(target1.creator.id).equal(source1.creator.id, 'id создателя 1 комментария должно соответствовать id создателя 2го комментария от юзера');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/comments/user?userId={{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"user"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Comment(Cancel by user)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
									"        \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        // блок с добавлением события1 \r",
									"        let eventBody1 = rnd.getEvent(category.id);\r",
									"        eventBody1['requestModeration'] = true\r",
									"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
									"        await api.publishEvent(event1.id);\r",
									"        \r",
									"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
									"        let comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
									"\r",
									"        pm.collectionVariables.set('comment1' , JSON.stringify(comment1));\r",
									"        let comment2 = rnd.getComment(event1.id);\r",
									"        comment2.userAction = \"CANCEL_REVIEW\";\r",
									"        comment2.id = comment1.id;\r",
									"\r",
									"        pm.collectionVariables.set('response' , JSON.stringify(comment2));\r",
									"        pm.collectionVariables.set(\"userId\", user1.id)\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: comment2,\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.collectionVariables.get('response'));\r",
									"const target = pm.response.json();\r",
									"const comment1Source = JSON.parse(pm.collectionVariables.get('comment1'));\r",
									"\r",
									"pm.test(\"Комментарий должно содержать поля: id, title, text, creator, event, createdOn, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('creator');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).equal(comment1Source.id, 'id комментария должен соответствовать искомому id');\r",
									"    pm.expect(target.title).equal(source.title, 'Название комментария должно соответствовать названию комментария в запросе');\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должна соответствовать тексту комментария в запросе');\r",
									"    pm.expect(target.creator.id).equal(pm.collectionVariables.get(\"userId\"), 'id создателя комментария должен соответствовать id создателя комментария в запросе');\r",
									"    pm.expect(target.event.id).equal(comment1Source.event.id, 'id события комментария должен соответствовать id события комментария в запросе');\r",
									"    pm.expect(target.event.description).equal(comment1Source.event.description,'description события должна соответствовать тексту комментария в запросе');\r",
									"    pm.expect(target.createdOn).equal(comment1Source.createdOn, \"Дата создания комментария должна соответствовать дате искомого\");\r",
									"    pm.expect(target.state).equal(\"CANCELED\", \"Дата создания комментария должна соответствовать дате искомого\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/comments/user?userId={{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"user"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment by User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
									"        pm.collectionVariables.set(\"userId\", user1.id);// установила в userid id юзера user\r",
									"\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        // блок с добавлением события1 \r",
									"        const eventBody1 = rnd.getEvent(category.id);\r",
									"        eventBody1['requestModeration'] = true\r",
									"        const event1 = await api.addEvent(user1.id, eventBody1);\r",
									"        await api.publishEvent(event1.id);\r",
									"\r",
									"        const comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
									"        const foundedComment = await api.findComment(comment1.id);\r",
									"        pm.collectionVariables.set(\"comment1\", comment1);\r",
									"        pm.collectionVariables.set('commentId', comment1.id);\r",
									"        pm.collectionVariables.set('response', foundedComment);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"let source = pm.collectionVariables.get('response');\r",
									"commentId = pm.collectionVariables.get('commentId');\r",
									"\r",
									"pm.test(\"Комментарий должен быть найден до удаления\", function () {\r",
									"    pm.expect(source).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"        url: pm.collectionVariables.get(\"baseUrl\") + \"/comments/user/\" + commentId,\r",
									"        method: 'GET',\r",
									"    }, (error, response) => {\r",
									"        pm.test(\"Комментарий должен быть удален после выполнения запроса\", function () {\r",
									"            pm.expect(response.code).to.eql(404);\r",
									"        });\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/comments/user/{{commentId}}?userId={{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"user",
								"{{commentId}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Comment(Send to review by user)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
									"        pm.collectionVariables.set(\"userId\", user1.id);\r",
									"\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        // блок с добавлением события1 \r",
									"        let eventBody1 = rnd.getEvent(category.id);\r",
									"        eventBody1['requestModeration'] = true\r",
									"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
									"        await api.publishEvent(event1.id);\r",
									"        \r",
									"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
									"        let comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
									"        pm.collectionVariables.set(\"source\", comment1);\r",
									"        let comment2 = rnd.getComment(event1.id);\r",
									"        comment2.userAction = \"CANCEL_REVIEW\";\r",
									"        comment2.title = comment1.title;\r",
									"        comment2.id = comment1.id;\r",
									"\r",
									"        comment2 = await api.updateComment(comment2, user1.id);\r",
									"        pm.collectionVariables.set('source1', comment2);\r",
									"\r",
									"        comment2.userAction = \"SEND_TO_REVIEW\";\r",
									"        pm.collectionVariables.set('response', comment2);\r",
									"\r",
									"        pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: comment2,\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"let source = pm.collectionVariables.get(\"source\");\r",
									"let source1 = pm.collectionVariables.get(\"source1\");\r",
									"let source2 = pm.collectionVariables.get(\"response\");\r",
									"\r",
									"pm.test(\"Комментарий должно содержать поля: id, title, text, creator, event, createdOn, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('creator');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Проверяем, что передыдущие данные были корректно подготовлены\", function () {\r",
									"    pm.expect(target.id).equal(source.id, 'id комментария  должен соответствовать искомому id');\r",
									"    pm.expect(target.id).equal(source1.id, 'id комментария 1 должен соответствовать искомому id');\r",
									"    pm.expect(target.id).equal(source2.id, 'id комментария 2 должен соответствовать искомому id');\r",
									"    pm.expect(\"PENDING\").equal(source.state, 'статус комментария должен соответствовать статусу ожидания');\r",
									"    pm.expect(\"CANCELED\").equal(source1.state, 'статус комментария должен соответствовать искомому статусу отмены');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).equal(source.id, 'id комментария должен соответствовать искомому id');\r",
									"    pm.expect(target.title).equal(source.title, 'Название комментария должно соответствовать названию комментария в запросе');\r",
									"    pm.expect(target.text).equal(source1.text, 'Текст комментария должна соответствовать тексту комментария в запросе');\r",
									"    pm.expect(target.creator.id).equal(pm.collectionVariables.get(\"userId\"), 'id создателя комментария должен соответствовать id создателя комментария в запросе');\r",
									"    pm.expect(target.event.id).equal(source.event.id, 'id события комментария должен соответствовать id события комментария в запросе');\r",
									"    pm.expect(target.event.description).equal(source.event.description,'description события должна соответствовать тексту комментария в запросе');\r",
									"    pm.expect(target.createdOn).equal(source.createdOn, \"Дата создания комментария должна соответствовать дате искомого\");\r",
									"    pm.expect(target.state).equal(\"PENDING\", \"Дата создания комментария должна соответствовать дате искомого\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/comments/user?userId={{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"user"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get event with comments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set('event' , JSON.stringify(event));\r",
									"\r",
									"        // добавляем коммент к созданному событию\r",
									"\r",
									"        const comment1 = await api.addComment((rnd.getComment(event.id)), user.id);\r",
									"        const comment2 = await api.addComment((rnd.getComment(event.id)), user.id);\r",
									"\r",
									"        const commentForUpd1 = rnd.getCommentForAdmin(comment1.id, \"PUBLISH_COMMENT\");\r",
									"        await api.updateByAdminComment(commentForUpd1);\r",
									"        \r",
									"        const foundedComment = await api.findComment(comment2.id);\r",
									"        pm.collectionVariables.set(\"commentId1\", comment1.id);\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"        pm.collectionVariables.set('comment1' , JSON.stringify(comment1));\r",
									"        pm.collectionVariables.set('comment2' , JSON.stringify(foundedComment));\r",
									"\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const source = JSON.parse(pm.collectionVariables.get('comment1'));\r",
									"const source1 = JSON.parse(pm.collectionVariables.get('comment2'));\r",
									"const event = JSON.parse(pm.collectionVariables.get('event'));\r",
									"const size = target.comments.length;\r",
									"\r",
									"pm.test(\"Комментарий2 должен быть найден после создания\", function () {\r",
									"    pm.expect(source1).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, comments\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('comments');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).equal(event.id, 'пользователю должно быть доступно только 1 опубликованный комментарий');\r",
									"    pm.expect(size).equal(1, 'пользователю должно быть доступно только 1 опубликованный комментарий');\r",
									"    pm.expect(target.comments[0].id).equal(source.id, 'id 0 комментария должно соответствовать id 1го комментария от юзера');\r",
									"});\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, title, text, creator, createdOn, publishedOn\", function () {\r",
									"\r",
									"    pm.expect(target.comments[0]).to.have.property('id');\r",
									"    pm.expect(target.comments[0]).to.have.property('title');\r",
									"    pm.expect(target.comments[0]).to.have.property('text');\r",
									"    pm.expect(target.comments[0]).to.have.property('creator');\r",
									"    pm.expect(target.comments[0]).to.have.property('createdOn');\r",
									"    pm.expect(target.comments[0]).to.have.property('publishedOn');\r",
									"    pm.expect(target.comments[0]).to.not.have.property('event');\r",
									"    pm.expect(target.comments[0]).to.not.have.property('state');\r",
									"    pm.expect(target.comments[0]).to.not.have.property('adminComment');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "(Required) id события"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin Comment Endpoints",
			"item": [
				{
					"name": "Moderate Comments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
									"        const user2 = await api.addUser(rnd.getUser());// добавляет коммент\r",
									"        \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        // блок с добавлением события1 \r",
									"        let eventBody1 = rnd.getEvent(category.id);\r",
									"        eventBody1['requestModeration'] = true\r",
									"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
									"        await api.publishEvent(event1.id);\r",
									"\r",
									"        let eventBody2 = rnd.getEvent(category.id);\r",
									"        eventBody2['requestModeration'] = true\r",
									"        let event2 = await api.addEvent(user2.id, eventBody2);\r",
									"        await api.publishEvent(event2.id);\r",
									"\r",
									"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
									"        const comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
									"\r",
									"// добавляем 2й коммент к 1му событию от 2 пользователя\r",
									"        const comment2 = await api.addComment((rnd.getComment(event1.id)), user2.id);\r",
									"        \r",
									"// добавляем 3й коммент к 2му событию от 2 пользователя\r",
									"        const comment3 = await api.addComment((rnd.getComment(event2.id)), user2.id);\r",
									"        pm.collectionVariables.set('comment1' , JSON.stringify(comment1));\r",
									"        pm.collectionVariables.set('comment2' , JSON.stringify(comment2));\r",
									"        pm.collectionVariables.set('comment3' , JSON.stringify(comment3));\r",
									"        pm.collectionVariables.set(\"commentId1\", comment1.id);\r",
									"        pm.collectionVariables.set(\"commentId2\", comment2.id)\r",
									"        pm.collectionVariables.set(\"commentId3\", comment3.id)\r",
									"        pm.collectionVariables.set(\"userId1\", user1.id);\r",
									"        pm.collectionVariables.set(\"userId2\", user2.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"const source1 = JSON.parse(pm.collectionVariables.get('comment1'));\r",
									"const source2 = JSON.parse(pm.collectionVariables.get('comment2'));\r",
									"const source3 = JSON.parse(pm.collectionVariables.get('comment3'));\r",
									"\r",
									"const size = pm.response.json().length;\r",
									"\r",
									"const target1 = pm.response.json()[size - 2];\r",
									"const target2 = pm.response.json()[size - 1];\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, title, text, creator, event, createdOn, publishedOn, state, adminComment \", function () {\r",
									"    pm.expect(target1).to.contain.keys('id', 'title', 'text', 'creator', 'event', 'createdOn', 'publishedOn', 'state', 'adminComment');\r",
									"    pm.expect(target2).to.contain.keys('id', 'title', 'text', 'creator', 'event', 'createdOn', 'publishedOn', 'state', 'adminComment');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target1.id).equal(source1.id, 'id 1 комментария должно соответствовать id 1го комментария от юзера');\r",
									"    pm.expect(target2.id).equal(source2.id, 'id 2 комментария должно соответствовать id 2го комментария от юзера');\r",
									"\r",
									"    pm.expect(target1.state).equal(\"PUBLISHED\", 'state 1 комментария должно соответствовать state 1го комментария от юзера');\r",
									"    pm.expect(target2.state).equal(\"CANCELED\", 'state 2 комментария должно соответствовать state 2го комментария от юзера');\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"        url: pm.collectionVariables.get(\"baseUrl\") + \"/comments/user/\" + source3.id,\r",
									"        method: 'GET',\r",
									"    }, function(err, response) {\r",
									"        pm.test(\"Другие комментарии не должны изменить статус\", function () {\r",
									"            pm.expect(response.json().state).equal(\"PENDING\", 'state 3 комментария должно соответствовать PENDING');\r",
									"        });\r",
									"    });\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"id\": {{commentId1}},\n    \"adminComment\": \"This comment has been approved by admin\",\n    \"adminAction\": \"PUBLISH_COMMENT\"\n  },\n  {\n    \"id\": {{commentId2}},\n    \"adminComment\": \"This comment has been approved by admin\",\n    \"adminAction\": \"REJECT_COMMENT\"\n  }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/comments/admin/moderate"
					},
					"response": []
				},
				{
					"name": "Get Comments by State",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
									"        const user2 = await api.addUser(rnd.getUser());// добавляет коммент\r",
									"        \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        // блок с добавлением события1 \r",
									"        let eventBody1 = rnd.getEvent(category.id);\r",
									"        eventBody1['requestModeration'] = true\r",
									"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
									"        await api.publishEvent(event1.id);\r",
									"\r",
									"        let eventBody2 = rnd.getEvent(category.id);\r",
									"        eventBody2['requestModeration'] = true\r",
									"        let event2 = await api.addEvent(user2.id, eventBody2);\r",
									"        await api.publishEvent(event2.id);\r",
									"\r",
									"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
									"        const comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
									"\r",
									"// добавляем 2й коммент к 1му событию от 2 пользователя\r",
									"        const comment2 = await api.addComment((rnd.getComment(event1.id)), user2.id);\r",
									"        \r",
									"// добавляем 3й коммент к 2му событию от 2 пользователя\r",
									"        const comment3 = await api.addComment((rnd.getComment(event2.id)), user2.id);\r",
									"        pm.collectionVariables.set('comment1' , JSON.stringify(comment1));\r",
									"        pm.collectionVariables.set('comment2' , JSON.stringify(comment2));\r",
									"        pm.collectionVariables.set('comment3' , JSON.stringify(comment3));\r",
									"        pm.collectionVariables.set(\"userId1\", user1.id);\r",
									"        pm.collectionVariables.set(\"userId2\", user2.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.collectionVariables.get('comment1'));\r",
									"const source1 = JSON.parse(pm.collectionVariables.get('comment2'));\r",
									"const source2 = JSON.parse(pm.collectionVariables.get('comment3'));\r",
									"\r",
									"const size = pm.response.json().length;\r",
									"\r",
									"const target = pm.response.json()[size - 3];\r",
									"const target1 = pm.response.json()[size - 2];\r",
									"const target2 = pm.response.json()[size - 1];\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, title, text, creator, event, createdOn, publishedOn, state, adminComment \", function () {\r",
									"    pm.expect(target).to.contain.keys('id', 'title', 'text', 'creator', 'event', 'createdOn', 'publishedOn', 'state', 'adminComment');\r",
									"    pm.expect(target1).to.contain.keys('id', 'title', 'text', 'creator', 'event', 'createdOn', 'publishedOn', 'state', 'adminComment');\r",
									"    pm.expect(target2).to.contain.keys('id', 'title', 'text', 'creator', 'event', 'createdOn', 'publishedOn', 'state', 'adminComment');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).equal(source.id, 'id 0 комментария должно соответствовать id 0го комментария от юзера');\r",
									"    pm.expect(target1.id).equal(source1.id, 'id 1 комментария должно соответствовать id 1го комментария от юзера');\r",
									"    pm.expect(target2.id).equal(source2.id, 'id 2 комментария должно соответствовать id 2го комментария от юзера');\r",
									"    pm.expect(target.creator.id).equal(source.creator.id, 'id создателя 0 комментария должно соответствовать id  создателя 1го комментария от юзера');\r",
									"    pm.expect(target1.creator.id).equal(source1.creator.id, 'id создателя 1 комментария должно соответствовать id создателя 2го комментария от юзера');\r",
									"    pm.expect(target2.creator.id).equal(source2.creator.id, 'id создателя 2 комментария должно соответствовать id создателя 3го комментария от юзера');\r",
									"    pm.expect(target.state).equal(\"PENDING\", 'state 0 комментария должно соответствовать state 0го комментария от юзера');\r",
									"    pm.expect(target1.state).equal(\"PENDING\", 'state 1 комментария должно соответствовать state 1го комментария от юзера');\r",
									"    pm.expect(target2.state).equal(\"PENDING\", 'state 2 комментария должно соответствовать state 2го комментария от юзера');\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Должны быть только статусы PENDING (не должно быть CANCELED)\", () => {\r",
									"    pm.expect(pm.response.text()).to.not.contain(\"\\\"CANCELED\\\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Должны быть только статусы PENDING (не должно быть PUBLISHED)\", () => {\r",
									"    pm.expect(pm.response.text()).to.not.contain(\"\\\"PUBLISHED\\\"\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:8080/comments/admin/PENDING"
					},
					"response": []
				},
				{
					"name": "Delete Comment by Admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
									"        \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        // блок с добавлением события1 \r",
									"        let eventBody1 = rnd.getEvent(category.id);\r",
									"        eventBody1['requestModeration'] = true\r",
									"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
									"        await api.publishEvent(event1.id);\r",
									"        \r",
									"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
									"        const comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
									"        const foundedComment = await api.findComment(comment1.id);\r",
									"\r",
									"        pm.collectionVariables.set('response', foundedComment);\r",
									"        pm.collectionVariables.set(\"userId1\", user1.id);\r",
									"        pm.collectionVariables.set(\"commentId\", comment1.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"let source = pm.collectionVariables.get('response');\r",
									"commentId = pm.collectionVariables.get('commentId');\r",
									"\r",
									"pm.test(\"Комментарий должен быть найден до удаления\", function () {\r",
									"    pm.expect(source).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"        url: pm.collectionVariables.get(\"baseUrl\") + \"/comments/user/\" + commentId,\r",
									"        method: 'GET',\r",
									"    }, (error, response) => {\r",
									"        pm.test(\"Комментарий должен быть удален после выполнения запроса\", function () {\r",
									"            pm.expect(response.code).to.eql(404);\r",
									"        });\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "http://localhost:8080/comments/admin/{{commentId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "String Restrictions",
					"item": [
						{
							"name": "Moderate Comments (Admin comment == 7000 и  == 20",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        // устанавиливаем новый коммент от админа\r",
											"        pm.collectionVariables.set(\"adminComment1\", rnd.getWord(20));\r",
											"        pm.collectionVariables.set(\"adminComment2\", rnd.getWord(7000));\r",
											"\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        const user2 = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"\r",
											"        let eventBody2 = rnd.getEvent(category.id);\r",
											"        eventBody2['requestModeration'] = true\r",
											"        let event2 = await api.addEvent(user2.id, eventBody2);\r",
											"        await api.publishEvent(event2.id);\r",
											"\r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        const comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"\r",
											"// добавляем 2й коммент к 1му событию от 2 пользователя\r",
											"        const comment2 = await api.addComment((rnd.getComment(event1.id)), user2.id);\r",
											"        \r",
											"// добавляем 3й коммент к 2му событию от 2 пользователя\r",
											"        const comment3 = await api.addComment((rnd.getComment(event2.id)), user2.id);\r",
											"        pm.collectionVariables.set(\"comment1\", comment1);\r",
											"        pm.collectionVariables.set(\"comment2\", comment2)\r",
											"        pm.collectionVariables.set(\"comment3\", comment3)\r",
											"        pm.collectionVariables.set(\"commentId1\", comment1.id);\r",
											"        pm.collectionVariables.set(\"commentId2\", comment2.id)\r",
											"        pm.collectionVariables.set(\"commentId3\", comment3.id)\r",
											"        pm.collectionVariables.set(\"userId1\", user1.id);\r",
											"        pm.collectionVariables.set(\"userId2\", user2.id);\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"id\": {{commentId1}},\n    \"adminComment\": \"{{adminComment1}}\",\n    \"adminAction\": \"PUBLISH_COMMENT\"\n  },\n  {\n    \"id\": {{commentId2}},\n    \"adminComment\": \"{{adminComment2}}\",\n    \"adminAction\": \"REJECT_COMMENT\"\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/comments/admin/moderate"
							},
							"response": []
						},
						{
							"name": "Moderate Comments (Admin comment == 7000 и  < 20",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        // устанавиливаем новый коммент от админа\r",
											"        pm.collectionVariables.set(\"adminComment1\", rnd.getWord(19));\r",
											"        pm.collectionVariables.set(\"adminComment2\", rnd.getWord(7000));\r",
											"\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        const user2 = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"\r",
											"        let eventBody2 = rnd.getEvent(category.id);\r",
											"        eventBody2['requestModeration'] = true\r",
											"        let event2 = await api.addEvent(user2.id, eventBody2);\r",
											"        await api.publishEvent(event2.id);\r",
											"\r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        const comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"\r",
											"// добавляем 2й коммент к 1му событию от 2 пользователя\r",
											"        const comment2 = await api.addComment((rnd.getComment(event1.id)), user2.id);\r",
											"        \r",
											"// добавляем 3й коммент к 2му событию от 2 пользователя\r",
											"        const comment3 = await api.addComment((rnd.getComment(event2.id)), user2.id);\r",
											"        pm.collectionVariables.set(\"comment1\", comment1);\r",
											"        pm.collectionVariables.set(\"comment2\", comment2)\r",
											"        pm.collectionVariables.set(\"comment3\", comment3)\r",
											"        pm.collectionVariables.set(\"commentId1\", comment1.id);\r",
											"        pm.collectionVariables.set(\"commentId2\", comment2.id)\r",
											"        pm.collectionVariables.set(\"commentId3\", comment3.id)\r",
											"        pm.collectionVariables.set(\"userId1\", user1.id);\r",
											"        pm.collectionVariables.set(\"userId2\", user2.id);\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"id\": {{commentId1}},\n    \"adminComment\": \"{{adminComment1}}\",\n    \"adminAction\": \"PUBLISH_COMMENT\"\n  },\n  {\n    \"id\": {{commentId2}},\n    \"adminComment\": \"{{adminComment2}}\",\n    \"adminAction\": \"REJECT_COMMENT\"\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/comments/admin/moderate"
							},
							"response": []
						},
						{
							"name": "Moderate Comments (Admin comment > 7000 и  == 20",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        // устанавиливаем новый коммент от админа\r",
											"        pm.collectionVariables.set(\"adminComment1\", rnd.getWord(20));\r",
											"        pm.collectionVariables.set(\"adminComment2\", rnd.getWord(7001));\r",
											"\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        const user2 = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"\r",
											"        let eventBody2 = rnd.getEvent(category.id);\r",
											"        eventBody2['requestModeration'] = true\r",
											"        let event2 = await api.addEvent(user2.id, eventBody2);\r",
											"        await api.publishEvent(event2.id);\r",
											"\r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        const comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"\r",
											"// добавляем 2й коммент к 1му событию от 2 пользователя\r",
											"        const comment2 = await api.addComment((rnd.getComment(event1.id)), user2.id);\r",
											"        \r",
											"// добавляем 3й коммент к 2му событию от 2 пользователя\r",
											"        const comment3 = await api.addComment((rnd.getComment(event2.id)), user2.id);\r",
											"        pm.collectionVariables.set(\"comment1\", comment1);\r",
											"        pm.collectionVariables.set(\"comment2\", comment2)\r",
											"        pm.collectionVariables.set(\"comment3\", comment3)\r",
											"        pm.collectionVariables.set(\"commentId1\", comment1.id);\r",
											"        pm.collectionVariables.set(\"commentId2\", comment2.id)\r",
											"        pm.collectionVariables.set(\"commentId3\", comment3.id)\r",
											"        pm.collectionVariables.set(\"userId1\", user1.id);\r",
											"        pm.collectionVariables.set(\"userId2\", user2.id);\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"id\": {{commentId1}},\n    \"adminComment\": \"{{adminComment1}}\",\n    \"adminAction\": \"PUBLISH_COMMENT\"\n  },\n  {\n    \"id\": {{commentId2}},\n    \"adminComment\": \"{{adminComment2}}\",\n    \"adminAction\": \"REJECT_COMMENT\"\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/comments/admin/moderate"
							},
							"response": []
						},
						{
							"name": "Create Comment с text <20",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());// создает событие\r",
											"        const userComment = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        pm.collectionVariables.set(\"userId\", userComment.id);// установила в userid id юзера userComment\r",
											"\r",
											"// блок с добавлением события \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let eventBody = rnd.getEvent(category.id);\r",
											"        eventBody['requestModeration'] = true\r",
											"        let event = await api.addEvent(user.id, eventBody);\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"event\", event);\r",
											"\r",
											"// добавляем коммент к созданному событию\r",
											"        comment = rnd.getComment(event.id);\r",
											"        comment.text = rnd.getWord(19);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"        pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment с text >7000",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());// создает событие\r",
											"        const userComment = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        pm.collectionVariables.set(\"userId\", userComment.id);// установила в userid id юзера userComment\r",
											"\r",
											"// блок с добавлением события \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let eventBody = rnd.getEvent(category.id);\r",
											"        eventBody['requestModeration'] = true\r",
											"        let event = await api.addEvent(user.id, eventBody);\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"event\", event);\r",
											"\r",
											"// добавляем коммент к созданному событию\r",
											"        comment = rnd.getComment(event.id);\r",
											"        comment.text = rnd.getWord(7001);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"        pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment с title<3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());// создает событие\r",
											"        const userComment = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        pm.collectionVariables.set(\"userId\", userComment.id);// установила в userid id юзера userComment\r",
											"\r",
											"// блок с добавлением события \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let eventBody = rnd.getEvent(category.id);\r",
											"        eventBody['requestModeration'] = true\r",
											"        let event = await api.addEvent(user.id, eventBody);\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"event\", event);\r",
											"\r",
											"// добавляем коммент к созданному событию\r",
											"        comment = rnd.getComment(event.id);\r",
											"        comment.title = rnd.getWord(2);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"        pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment с title>120",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());// создает событие\r",
											"        const userComment = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        pm.collectionVariables.set(\"userId\", userComment.id);// установила в userid id юзера userComment\r",
											"\r",
											"// блок с добавлением события \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let eventBody = rnd.getEvent(category.id);\r",
											"        eventBody['requestModeration'] = true\r",
											"        let event = await api.addEvent(user.id, eventBody);\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"event\", event);\r",
											"\r",
											"// добавляем коммент к созданному событию\r",
											"        comment = rnd.getComment(event.id);\r",
											"        comment.title = rnd.getWord(121);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"        pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment с text.length == 7000 && title.length == 120",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());// создает событие\r",
											"        const userComment = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        pm.collectionVariables.set(\"userId\", userComment.id);// установила в userid id юзера userComment\r",
											"\r",
											"// блок с добавлением события \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let eventBody = rnd.getEvent(category.id);\r",
											"        eventBody['requestModeration'] = true\r",
											"        let event = await api.addEvent(user.id, eventBody);\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"event\", event);\r",
											"\r",
											"// добавляем коммент к созданному событию\r",
											"        comment = rnd.getComment(event.id);\r",
											"        comment.text = rnd.getWord(7000);\r",
											"        comment.title = rnd.getWord(120);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"        pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						},
						{
							"name": "Create Comment с text.length == 20 && title.length == 3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());// создает событие\r",
											"        const userComment = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        pm.collectionVariables.set(\"userId\", userComment.id);// установила в userid id юзера userComment\r",
											"\r",
											"// блок с добавлением события \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let eventBody = rnd.getEvent(category.id);\r",
											"        eventBody['requestModeration'] = true\r",
											"        let event = await api.addEvent(user.id, eventBody);\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"event\", event);\r",
											"\r",
											"// добавляем коммент к созданному событию\r",
											"        comment = rnd.getComment(event.id);\r",
											"        comment.text = rnd.getWord(20);\r",
											"        comment.title = rnd.getWord(3);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"        pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						},
						{
							"name": "Update Comment( Comment с text ==20 и title==3)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        pm.collectionVariables.set(\"userId\", user1.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"        \r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        let comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"        pm.collectionVariables.set(\"comment1\", comment1);\r",
											"        let comment2 = rnd.getComment(event1.id);\r",
											"        comment2.userAction = \"SEND_TO_REVIEW\";\r",
											"        comment2.id = comment1.id;\r",
											"        comment2.text = rnd.getWord(20);\r",
											"        comment2.title = rnd.getWord(3);\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: comment2,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Comment( Comment с text ==7000 и title==120)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        pm.collectionVariables.set(\"userId\", user1.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"        \r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        let comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"        pm.collectionVariables.set(\"comment1\", comment1);\r",
											"        let comment2 = rnd.getComment(event1.id);\r",
											"        comment2.userAction = \"SEND_TO_REVIEW\";\r",
											"        comment2.id = comment1.id;\r",
											"        comment2.text = rnd.getWord(7000);\r",
											"        comment2.title = rnd.getWord(120);\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: comment2,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Comment( Comment с text > 7000 и title==120)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        pm.collectionVariables.set(\"userId\", user1.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"        \r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        let comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"        pm.collectionVariables.set(\"comment1\", comment1);\r",
											"        let comment2 = rnd.getComment(event1.id);\r",
											"        comment2.userAction = \"SEND_TO_REVIEW\";\r",
											"        comment2.id = comment1.id;\r",
											"        comment2.text = rnd.getWord(7001);\r",
											"        comment2.title = rnd.getWord(120);\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: comment2,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Comment( Comment с text == 7000 и title > 120)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        pm.collectionVariables.set(\"userId\", user1.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"        \r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        let comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"        pm.collectionVariables.set('comment1' , JSON.stringify(comment1));\r",
											"        let comment2 = rnd.getComment(event1.id);\r",
											"        comment2.userAction = \"SEND_TO_REVIEW\";\r",
											"        comment2.id = comment1.id;\r",
											"        comment2.text = rnd.getWord(7000);\r",
											"        comment2.title = rnd.getWord(121);\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: comment2,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Comment( Comment с text < 20 и title==120)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        pm.collectionVariables.set(\"userId\", user1.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"        \r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        let comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"        pm.collectionVariables.set(\"comment1\", comment1);\r",
											"        let comment2 = rnd.getComment(event1.id);\r",
											"        comment2.userAction = \"SEND_TO_REVIEW\";\r",
											"        comment2.id = comment1.id;\r",
											"        comment2.text = rnd.getWord(19);\r",
											"        comment2.title = rnd.getWord(120);\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: comment2,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Comment( Comment с text ==7000 и title < 3)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        pm.collectionVariables.set(\"userId\", user1.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"        \r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        let comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"        pm.collectionVariables.set(\"comment1\", comment1);\r",
											"        let comment2 = rnd.getComment(event1.id);\r",
											"        comment2.userAction = \"SEND_TO_REVIEW\";\r",
											"        comment2.id = comment1.id;\r",
											"        comment2.text = rnd.getWord(7000);\r",
											"        comment2.title = rnd.getWord(2);\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: comment2,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "conflict",
					"item": [
						{
							"name": "Update Comment(Send to review by user)by another user Conflict 409",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        pm.collectionVariables.set(\"userId\", user1.id);\r",
											"        const user2 = await api.addUser(rnd.getUser());// создает событие\r",
											"\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"        \r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        let comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"        pm.collectionVariables.set(\"source\", comment1);\r",
											"        let comment2 = rnd.getComment(event1.id);\r",
											"        comment2.userAction = \"CANCEL_REVIEW\";\r",
											"        comment2.title = comment1.title;\r",
											"        comment2.id = comment1.id;\r",
											"\r",
											"        comment2 = await api.updateComment(comment2, user1.id);\r",
											"        pm.collectionVariables.set('source1', comment2);\r",
											"\r",
											"        comment2.userAction = \"SEND_TO_REVIEW\";\r",
											"        pm.collectionVariables.set('response', comment2);\r",
											"        pm.collectionVariables.set(\"userId\", user2.id)\r",
											"\r",
											"        pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: comment2,\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Comment(Cancel by user)by another user Conflict 409",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        const user2 = await api.addUser(rnd.getUser());// \r",
											"\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"        \r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        let comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"        pm.collectionVariables.set(\"comment1\", comment1);\r",
											"        let comment2 = rnd.getComment(event1.id);\r",
											"        comment2.userAction = \"CANCEL_REVIEW\";\r",
											"        comment2.id = comment1.id;\r",
											"        pm.collectionVariables.set('response', comment2);\r",
											"        pm.collectionVariables.set(\"userId\", user2.id)\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: comment2,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Moderate Comments (published , 409)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"\r",
											"\r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        const comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"        const comment2 = rnd.getCommentForAdmin(comment1.id, \"PUBLISH_COMMENT\");\r",
											"\r",
											"        pm.collectionVariables.set(\"comment1\", comment1);\r",
											"        pm.collectionVariables.set(\"commentId1\", comment1.id);\r",
											"        pm.collectionVariables.set(\"userId1\", user1.id);\r",
											"        \r",
											"        await api.updateByAdminComment(comment2);\r",
											"\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"id\": {{commentId1}},\n    \"adminComment\": \"This comment has been approved by admin\",\n    \"adminAction\": \"PUBLISH_COMMENT\"\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/comments/admin/moderate"
							},
							"response": []
						},
						{
							"name": "Moderate Comments (rejected , 409)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"\r",
											"\r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        const comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"        const comment2 = rnd.getCommentForAdmin(comment1.id, \"REJECT_COMMENT\");\r",
											"\r",
											"        pm.collectionVariables.set(\"comment1\", comment1);\r",
											"        pm.collectionVariables.set(\"commentId1\", comment1.id);\r",
											"        pm.collectionVariables.set(\"userId1\", user1.id);\r",
											"        \r",
											"        await api.updateByAdminComment(comment2);\r",
											"\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"id\": {{commentId1}},\n    \"adminComment\": \"This comment has been approved by admin\",\n    \"adminAction\": \"PUBLISH_COMMENT\"\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/comments/admin/moderate"
							},
							"response": []
						},
						{
							"name": "Update Comment(Published)Conflict 409",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"\r",
											"\r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        const comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"        const comment2 = rnd.getCommentForAdmin(comment1.id, \"PUBLISH_COMMENT\");\r",
											"\r",
											"        pm.collectionVariables.set(\"comment1\", comment1);\r",
											"        pm.collectionVariables.set(\"commentId1\", comment1.id);\r",
											"        pm.collectionVariables.set(\"userId\", user1.id);\r",
											"        \r",
											"        await api.updateByAdminComment(comment2);\r",
											"        \r",
											"        comment1.userAction = \"SEND_TO_REVIEW\";\r",
											"\r",
											"        pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: comment1,\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment (Event not published , 409)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());// создает событие\r",
											"        const userComment = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        pm.collectionVariables.set(\"userId\", userComment.id);// установила в userid id юзера userComment\r",
											"\r",
											"// блок с добавлением события \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let eventBody = rnd.getEvent(category.id);\r",
											"        eventBody['requestModeration'] = true\r",
											"        let event = await api.addEvent(user.id, eventBody);\r",
											"\r",
											"        pm.collectionVariables.set(\"event\", event);\r",
											"\r",
											"// добавляем коммент к созданному событию\r",
											"        comment = rnd.getComment(event.id);\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"        pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "not found",
					"item": [
						{
							"name": "Get User Comments (userid not found , 404)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        const user2 = await api.addUser(rnd.getUser());// \r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"\r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        const comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"\r",
											"// добавляем 2й коммент к 1му событию от 2 пользователя\r",
											"        const comment2 = await api.addComment((rnd.getComment(event1.id)), user2.id);\r",
											"        \r",
											"// добавляем 3й коммент к 1му событию от 2 пользователя\r",
											"        const comment3 = await api.addComment((rnd.getComment(event1.id)), user2.id);\r",
											"        pm.collectionVariables.set(\"comment1\", comment2);\r",
											"        pm.collectionVariables.set(\"comment2\", comment3)\r",
											"        pm.collectionVariables.set(\"userId\", 10000000000);\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Comment( id doesn't exist, 404)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        pm.collectionVariables.set(\"userId\", user1.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"        \r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        let comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"        pm.collectionVariables.set(\"comment1\", comment1);\r",
											"        let comment2 = rnd.getComment(event1.id);\r",
											"        comment2.userAction = \"SEND_TO_REVIEW\";\r",
											"        comment2.id = 10000000;\r",
											"        comment2.text = rnd.getWord(7000);\r",
											"        comment2.title = rnd.getWord(120);\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: comment2,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Moderate Comments (id doesn't exist , 404)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        // устанавиливаем новый коммент от админа\r",
											"        pm.collectionVariables.set(\"adminComment1\", rnd.getWord(20));\r",
											"        pm.collectionVariables.set(\"adminComment2\", rnd.getWord(7000));\r",
											"\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        const user2 = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"\r",
											"        let eventBody2 = rnd.getEvent(category.id);\r",
											"        eventBody2['requestModeration'] = true\r",
											"        let event2 = await api.addEvent(user2.id, eventBody2);\r",
											"        await api.publishEvent(event2.id);\r",
											"\r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        const comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"\r",
											"// добавляем 2й коммент к 1му событию от 2 пользователя\r",
											"        const comment2 = await api.addComment((rnd.getComment(event1.id)), user2.id);\r",
											"        \r",
											"// добавляем 3й коммент к 2му событию от 2 пользователя\r",
											"        const comment3 = await api.addComment((rnd.getComment(event2.id)), user2.id);\r",
											"        pm.collectionVariables.set(\"comment1\", comment1);\r",
											"        pm.collectionVariables.set(\"comment2\", comment2)\r",
											"        pm.collectionVariables.set(\"comment3\", comment3)\r",
											"        pm.collectionVariables.set(\"commentId1\", comment1.id);\r",
											"        pm.collectionVariables.set(\"commentId2\", comment2.id)\r",
											"        pm.collectionVariables.set(\"commentId3\", comment3.id)\r",
											"        pm.collectionVariables.set(\"userId1\", user1.id);\r",
											"        pm.collectionVariables.set(\"userId2\", user2.id);\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"id\": 100000000000,\n    \"adminComment\": \"{{adminComment1}}\",\n    \"adminAction\": \"PUBLISH_COMMENT\"\n  },\n  {\n    \"id\": {{commentId2}},\n    \"adminComment\": \"{{adminComment2}}\",\n    \"adminAction\": \"REJECT_COMMENT\"\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/comments/admin/moderate"
							},
							"response": []
						},
						{
							"name": "Create Comment (UserId not found, 404)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());// создает событие\r",
											"        pm.collectionVariables.set(\"userId\", 1000090000);// установила в userid id юзера userComment\r",
											"\r",
											"// блок с добавлением события \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let eventBody = rnd.getEvent(category.id);\r",
											"        eventBody['requestModeration'] = true\r",
											"        let event = await api.addEvent(user.id, eventBody);\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"event\", event);\r",
											"\r",
											"// добавляем коммент к созданному событию\r",
											"        comment = rnd.getComment(event.id);\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"        pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment (Event not found, 404)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());// создает событие\r",
											"        const userComment = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        pm.collectionVariables.set(\"userId\", userComment.id);// установила в userid id юзера userComment\r",
											"\r",
											"// блок с добавлением события \r",
											"\r",
											"\r",
											"// добавляем коммент к созданному событию\r",
											"        comment = rnd.getComment(1000000000);\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"        pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Comment by ID (commentId not found, 404)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        pm.collectionVariables.set(\"commentId\", 100000000);\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/comments/user/{{commentId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user",
										"{{commentId}}"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Comment by User (comment by user not found, 404)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        pm.collectionVariables.set(\"userId\", user1.id);// установила в userid id юзера user\r",
											"\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        const eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        const event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"\r",
											"        const comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"\r",
											"        pm.collectionVariables.set('commentId', 1000000000);\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:8080/comments/user/{{commentId}}?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user",
										"{{commentId}}"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Comment by Admin (comment not found, 404)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        pm.collectionVariables.set('commentId', 1000000000);\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://localhost:8080/comments/admin/{{commentId}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "Required params in body",
					"item": [
						{
							"name": "Create Comment(without title, 400)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());// создает событие\r",
											"        const userComment = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        pm.collectionVariables.set(\"userId\", userComment.id);// установила в userid id юзера userComment\r",
											"\r",
											"        // блок с добавлением события \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let eventBody = rnd.getEvent(category.id);\r",
											"        eventBody['requestModeration'] = true\r",
											"        let event = await api.addEvent(user.id, eventBody);\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"event\", event);\r",
											"\r",
											"        // добавляем коммент к созданному событию\r",
											"        comment = rnd.getComment(event.id);\r",
											"        delete comment[\"title\"];\r",
											"\r",
											"    } catch (err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => { }, 1000);\r",
											"\r",
											"setTimeout(async () => {\r",
											"    try {\r",
											"        // выполняем наш скрипт\r",
											"        await main();\r",
											"    } catch (e) {\r",
											"        console.error(e);\r",
											"    } finally {\r",
											"        clearInterval(interval);\r",
											"    }\r",
											"},\r",
											"    100\r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment(without text, 400)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());// создает событие\r",
											"        const userComment = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        pm.collectionVariables.set(\"userId\", userComment.id);// установила в userid id юзера userComment\r",
											"\r",
											"        // блок с добавлением события \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let eventBody = rnd.getEvent(category.id);\r",
											"        eventBody['requestModeration'] = true\r",
											"        let event = await api.addEvent(user.id, eventBody);\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"event\", event);\r",
											"\r",
											"        // добавляем коммент к созданному событию\r",
											"        comment = rnd.getComment(event.id);\r",
											"        delete comment[\"text\"];\r",
											"\r",
											"    } catch (err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => { }, 1000);\r",
											"\r",
											"setTimeout(async () => {\r",
											"    try {\r",
											"        // выполняем наш скрипт\r",
											"        await main();\r",
											"    } catch (e) {\r",
											"        console.error(e);\r",
											"    } finally {\r",
											"        clearInterval(interval);\r",
											"    }\r",
											"},\r",
											"    100\r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment(without eventid, 400)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());// создает событие\r",
											"        const userComment = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        pm.collectionVariables.set(\"userId\", userComment.id);// установила в userid id юзера userComment\r",
											"\r",
											"        // блок с добавлением события \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let eventBody = rnd.getEvent(category.id);\r",
											"        eventBody['requestModeration'] = true\r",
											"        let event = await api.addEvent(user.id, eventBody);\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"event\", event);\r",
											"\r",
											"        // добавляем коммент к созданному событию\r",
											"        comment = rnd.getComment(event.id);\r",
											"        delete comment[\"eventId\"];\r",
											"\r",
											"    } catch (err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => { }, 1000);\r",
											"\r",
											"setTimeout(async () => {\r",
											"    try {\r",
											"        // выполняем наш скрипт\r",
											"        await main();\r",
											"    } catch (e) {\r",
											"        console.error(e);\r",
											"    } finally {\r",
											"        clearInterval(interval);\r",
											"    }\r",
											"},\r",
											"    100\r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/comments/user?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "required query params",
					"item": [
						{
							"name": "Create Comment (without userid, 400)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());// создает событие\r",
											"        const userComment = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        pm.collectionVariables.set(\"userId\", userComment.id);// установила в userid id юзера userComment\r",
											"\r",
											"// блок с добавлением события \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let eventBody = rnd.getEvent(category.id);\r",
											"        eventBody['requestModeration'] = true\r",
											"        let event = await api.addEvent(user.id, eventBody);\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"event\", event);\r",
											"\r",
											"// добавляем коммент к созданному событию\r",
											"        comment = rnd.getComment(event.id);\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"        pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/comments/user"
							},
							"response": []
						},
						{
							"name": "Get User Comments (without userid, 400)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        const user2 = await api.addUser(rnd.getUser());// добавляет коммент\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"\r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        const comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"\r",
											"// добавляем 2й коммент к 1му событию от 2 пользователя\r",
											"        const comment2 = await api.addComment((rnd.getComment(event1.id)), user2.id);\r",
											"        \r",
											"// добавляем 3й коммент к 1му событию от 2 пользователя\r",
											"        const comment3 = await api.addComment((rnd.getComment(event1.id)), user2.id);\r",
											"        pm.collectionVariables.set(\"comment1\", comment2);\r",
											"        pm.collectionVariables.set(\"comment2\", comment3)\r",
											"        pm.collectionVariables.set(\"userId\", user2.id);\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:8080/comments/user"
							},
							"response": []
						},
						{
							"name": "Update Comment(without userid, 400)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        let eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        let event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"        \r",
											"// добавляем 1й коммент к 1му событию от 1 пользователя\r",
											"        let comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"        pm.collectionVariables.set(\"comment1\", comment1);\r",
											"        let comment2 = rnd.getComment(event1.id);\r",
											"        comment2.userAction = \"CANCEL_REVIEW\";\r",
											"        comment2.id = comment1.id;\r",
											"        pm.collectionVariables.set('response', comment2);\r",
											"        pm.collectionVariables.set(\"userId\", user1.id)\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: comment2,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": "http://localhost:8080/comments/user"
							},
							"response": []
						},
						{
							"name": "Delete Comment (without userid, 400)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());// создает событие\r",
											"        pm.collectionVariables.set(\"userId\", user1.id);// установила в userid id юзера user\r",
											"\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // блок с добавлением события1 \r",
											"        const eventBody1 = rnd.getEvent(category.id);\r",
											"        eventBody1['requestModeration'] = true\r",
											"        const event1 = await api.addEvent(user1.id, eventBody1);\r",
											"        await api.publishEvent(event1.id);\r",
											"\r",
											"        const comment1 = await api.addComment((rnd.getComment(event1.id)), user1.id);\r",
											"        const foundedComment = await api.findComment(comment1.id);\r",
											"        pm.collectionVariables.set(\"comment1\", comment1);\r",
											"        pm.collectionVariables.set('commentId', comment1.id);\r",
											"        pm.collectionVariables.set('response', foundedComment);\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://localhost:8080/comments/user/{{commentId}}"
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Generate random IDs for tests",
					"//pm.variables.set('userId', Math.floor(Math.random() * 1000) + 1);",
					"//pm.variables.set('eventId', Math.floor(Math.random() * 1000) + 1);",
					"//pm.variables.set('commentId', Math.floor(Math.random() * 1000) + 1);",
					"",
					"",
					"",
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async addComment(comment, userId, verbose=null) {",
					"        return this.post(\"/comments/user?userId=\" + userId, comment, \"Ошибка при добавлении нового комментария: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"",
					"    async updateComment(comment, userId, verbose=null) {",
					"        return this.patch(\"/comments/user?userId=\" + userId, comment, \"Ошибка при обновлении  комментария: \", verbose);",
					"    }",
					"",
					"    async updateByAdminComment(eventsToModerate, verbose=null) {",
					"        return this.patch('/comments/admin/moderate', eventsToModerate , \"Ошибка при модерации комментария\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"    ",
					"    async findComment(commentId, verbose=null) {",
					"        return this.get('/comments/user/' + commentId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    ",
					"    getComment(eventId) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            eventId: eventId,",
					"            text: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"        }",
					"    }",
					"",
					"    getCommentForAdmin(id, adminAction) {",
					"    let result = [",
					"            {",
					"            id: id,",
					"            adminComment: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            adminAction: adminAction",
					"            }",
					"        ];",
					"        return result;",
					"            ",
					"    }",
					"    ",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "userId",
			"value": "1",
			"type": "number"
		},
		{
			"key": "eventId",
			"value": "1",
			"type": "number"
		},
		{
			"key": "commentId",
			"value": "1",
			"type": "number"
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "reqid",
			"value": "1",
			"type": "number"
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "1"
		},
		{
			"key": "eid",
			"value": "1",
			"type": "number"
		},
		{
			"key": "compid",
			"value": "1",
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "catId",
			"value": "1"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "uid1",
			"value": "1",
			"type": "string"
		},
		{
			"key": "userComment",
			"value": "",
			"type": "string"
		},
		{
			"key": "comId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "event",
			"value": "",
			"type": "string"
		},
		{
			"key": "comment1",
			"value": "1",
			"type": "string"
		},
		{
			"key": "comment2",
			"value": "1",
			"type": "string"
		},
		{
			"key": "[object Object]",
			"value": ""
		},
		{
			"key": "userId1",
			"value": "1",
			"type": "string"
		},
		{
			"key": "userId2",
			"value": "1",
			"type": "string"
		},
		{
			"key": "comment3",
			"value": "",
			"type": "string"
		},
		{
			"key": "commentId1",
			"value": "1",
			"type": "string"
		},
		{
			"key": "commentId2",
			"value": "1",
			"type": "string"
		},
		{
			"key": "commentId3",
			"value": "1",
			"type": "string"
		},
		{
			"key": "adminComment1",
			"value": "",
			"type": "string"
		},
		{
			"key": "adminComment2",
			"value": "",
			"type": "string"
		}
	]
}